public IQueryable<Question> GetQuestionsByMotsCles(string MotsCles, bool searchLibelle)
        {
            string[] _motsCles = SearchEngineHelper.GetTabMotsCles(MotsCles);

            if (_motsCles.Length > 0)
            {
                _motsCles = SearchEngineHelper.GereCaracteresSpeciaux(_motsCles);
                _motsCles = SearchEngineHelper.GerePlurielsEtFeminins(_motsCles);

                // On rend la saisie case insensitive
                string[] _motsCles2 = new string[_motsCles.Length * 2];
                for (int i = 0; i < _motsCles.Length; i++)
                {
                    _motsCles2[i] = _motsCles[i].ToUpper();
                }

                // On gère les accents
                for (int i = _motsCles.Length; i < (_motsCles2.Length); i++)
                {
                    _motsCles2[i] = SearchEngineHelper.RemoveDiacritics(_motsCles[i - _motsCles.Length]).ToUpper();
                }

                var results = from q in this.Context.Questions
                              join qmc in this.Context.QuestionMotCles on q.ID equals qmc.CE_Question
                              join mc in this.Context.MotCles on qmc.CE_MotCle equals mc.ID
                              where _motsCles2.Contains(mc.Libelle.ToUpper())
                              select q;
                if (searchLibelle)
                {
                    results = from q in this.Context.Questions
                              join qmc in this.Context.QuestionMotCles on q.ID equals qmc.CE_Question
                              join mc in this.Context.MotCles on qmc.CE_MotCle equals mc.ID
                              where _motsCles2.Contains(mc.Libelle.ToUpper()) || q.Libelle.ToUpper().Contains(MotsCles.ToUpper())
                              select q;
                }
                return results;
            }
            else
            {
                return null;
            }
        }